on:
  workflow_call:
    inputs:
      build-command:
        required: true
        type: string
      environment:
        required: true
        type: string
      prerelease:
        type: string
        default: ''
    secrets:
      GPG_KEY:
        required: true
jobs:
  native:
    runs-on: windows-2019
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Install prerequisites
        run: |
          choco install ninja
      - name: Build native library
        shell: cmake -P {0}
        run: |
          set(ENV{CC} cl)
          set(ENV{CXX} cl)
          
          execute_process(
            COMMAND "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat" && set
            OUTPUT_FILE environment_script_output.txt
          )
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
          
          execute_process(
            COMMAND cmake
              -S .
              -B build-win
              -D CMAKE_BUILD_TYPE=Release
              -D "CMAKE_SYSTEM_VERSION=10.0.19041.0"
              -G Ninja
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()
          
          execute_process(
            COMMAND cmake
              --build build-win
              --target MediaPlayerInfo
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()
      - name: Save native library to cache
        uses: actions/cache/save@v4
        id: cache
        with:
          path: build-win/MediaPlayerInfo.dll
          key: "native-win-${{ github.sha }}"
          enableCrossOsArchive: true
  build:
    runs-on: ubuntu-latest
    env:
      MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
      MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
      GITHUB_ACTOR: ${{ github.GITHUB_ACTOR }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    needs:
      - native
    environment: ${{ inputs.environment }}
    permissions:
      packages: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set short git commit SHA
        if: inputs.environment == 'development'
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "NIGHTLY_COMMIT=$calculatedSha" >> $GITHUB_ENV
      - name: Set prerelease version
        if: inputs.environment == 'staging'
        run: |
          echo "CI_PRERELEASE=${{ inputs.prerelease }}" >> $GITHUB_ENV
      - name: Import GPG key
        run: echo -n "$GPG_SIGNING_KEY" | base64 --decode | gpg --import
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_KEY }}
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Restore native Windows library from cache
        uses: actions/cache/restore@v4
        id: cache
        with:
          path: build-win/MediaPlayerInfo.dll
          key: "native-win-${{ github.sha }}"
          enableCrossOsArchive: true
      - name: Copy dll to resources
        run: cp build-win/MediaPlayerInfo.dll src/main/resources/mediaplayerinfo/natives/win/
      - name: Build with Gradle
        run: ./gradlew clean ${{ inputs.build-command }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: build/libs/*
      - name: Get Gradle version
        if: inputs.environment != 'development'
        run: echo "RELEASE_VERSION=$(./gradlew -q getVersion)" >> $GITHUB_ENV
      - name: Create GitHub Release
        if: inputs.environment != 'development'
        uses: "actions/github-script@v6"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            const fs = require('fs');
            try {
              const response = await github.rest.repos.createRelease({
                draft: true,
                generate_release_notes: true,
                name: 'MediaPlayerInfo ${{ env.RELEASE_VERSION }}',
                owner: context.repo.owner,
                prerelease: ${{ inputs.prerelease != '' }},
                repo: context.repo.repo,
                tag_name: 'v${{ env.RELEASE_VERSION }}',
              });
            
              for (const file of fs.readdirSync('build/libs')) {
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: response.data.id,
                  name: file,
                  data: fs.readFileSync('build/libs/' + file)
                });
              }
            
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: response.data.id,
                draft: false
              });
            
              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }
